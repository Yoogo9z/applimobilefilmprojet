A faire :
- Lier une api pour recup json de film
- Ajouter des films aux favoris 
- Organiser la liste de favoris selon un critère


Boucle for

@Composable
fun ListContent(car1: List<Int>, modifier: Modifier = Modifier) {
    Column(
        modifier = modifier.fillMaxWidth()
    ) {
        val genres = listOf("Romance", "Thriller", "Comédie") // Exemple de genres

        for (genre in genres) {
            Spacer(modifier = Modifier.height(25.dp))
            Text(text = genre, color = Color(0xFFE0D68A))
            Row(modifier = Modifier.height(130.dp)) {
                LazyRow(modifier = Modifier.padding(top = 12.dp)) {
                    items(car1) { painter ->
                        ImageScroll(painter = painterResource(painter), text = "Titre du film")
                    }
                }
            }
        }
    }
}


                ) {
                    Column(
                        modifier = Modifier
                            .fillMaxHeight()
                            .fillMaxWidth()
                    ) {
                        Favoris(modifier = Modifier.weight(8.4f))
                    }
                }


Test API Antonin :

//package com.example.applimobilefilm.Test
//
//import android.os.Bundle
//import android.widget.Button
//import androidx.appcompat.app.AppCompatActivity
//import com.example.applimobilefilm.R
//import okhttp3.OkHttpClient
//import okhttp3.Request
//import java.io.IOException
//import kotlin.concurrent.thread
//
//class MainActivity : AppCompatActivity() {
//
//    private val client = OkHttpClient()
//
//    override fun onCreate(savedInstanceState: Bundle?) {
//        super.onCreate(savedInstanceState)
//        setContentView(R.layout.activity_main)
//
//        val buttonRequest = findViewById<Button>(R.id.button_request)
//        buttonRequest.setOnClickListener {
//            thread {
//                try {
//                    run()
//                } catch (e: IOException) {
//                    e.printStackTrace()
//                }
//            }
//        }
//    }
//
//    private fun run() {
//        val request = Request.Builder()
//            .url("https://api.ipstack.com/134.201.250.155?access_key=YOUR_ACCESS_KEY")
//            .build()
//
//        client.newCall(request).execute().use { response ->
//            if (!response.isSuccessful) throw IOException("Unexpected code $response")
//
//            // Imprimer les headers
//            for ((name, value) in response.headers) {
//                println("$name: $value")
//            }
//
//            // Imprimer le corps de la réponse
//            println(response.body!!.string())
//        }
//    }
//}

 



            .baseUrl("https://dummyapi.online/api/movies")



 import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.Column
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import com.example.applimobilefilm.domaine.model.Movie
import com.example.applimobilefilm.ui.theme.ApplimobilefilmTheme
import com.google.gson.Gson
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.io.IOException

class MainActivity : ComponentActivity() {

    private val movieApiClient = MovieApiClient()
    private var movies by mutableStateOf<List<Movie>>(emptyList())
    private var errorMessage by mutableStateOf("")

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()

        setContent {
            ApplimobilefilmTheme {
                val coroutineScope = rememberCoroutineScope()
                Scaffold(
                    modifier = Modifier.fillMaxSize()
                ) {
                    Column(modifier = Modifier.fillMaxSize()) {
                        if (movies.isEmpty() && errorMessage.isEmpty()) {
                            Text(text = "Loading...")
                        } else if (errorMessage.isNotEmpty()) {
                            Text(text = "Error: $errorMessage")
                        } else {
                            MovieListContent(movies)
                        }
                    }
                }

                coroutineScope.launch {
                    fetchMovies("https://dummyapi.online/api/movies")
                }
            }
        }
    }

    private suspend fun fetchMovies(apiUrl: String) {
        try {
            val response = withContext(Dispatchers.IO) {
                movieApiClient.fetchMovies(apiUrl)
            }
            if (response != null) {
                val moviesResponse = Gson().fromJson(response, Array<Movie>::class.java).toList()
                movies = moviesResponse
            } else {
                errorMessage = "Empty response from server."
            }
        } catch (e: IOException) {
            errorMessage = "Error: ${e.message}"
        }
    }

    @Composable
    fun MovieListContent(movies: List<Movie>) {
        Column(modifier = Modifier.fillMaxSize()) {
            movies.forEach { movie ->
                MovieItem(movie)
            }
        }
    }

    @Composable
    fun MovieItem(movie: Movie) {
        Column {
            Text(text = movie.movie)
            Text(text = "Rating: ${movie.rating}")
            // Ajoutez d'autres éléments ici si nécessaire (image, lien IMDb, etc.)
        }
    }

    @Preview(showBackground = true)
    @Composable
    fun MoviePreview() {
        MovieListContent(
            listOf(
                Movie(1, "The Shawshank Redemption", 9.2, "images/shawshank.jpg", "https://www.imdb.com/title/tt0111161/"),
                Movie(2, "The Godfather", 9.2, "images/godfather.jpg", "https://www.imdb.com/title/tt0068646/"),
                Movie(3, "The Dark Knight", 9.0, "images/dark_knight.jpg", "https://www.imdb.com/title/tt0468569/"),
                Movie(4, "Pulp Fiction", 8.9, "images/pulp_fiction.jpg", "https://www.imdb.com/title/tt0110912/")
            )
        )
    }
}










package com.example.applimobilefilm

import android.annotation.SuppressLint
import android.os.Bundle
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxHeight
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import com.example.applimobilefilm.components.BottomBar
import com.example.applimobilefilm.components.SearchBarWithIcon
import com.example.applimobilefilm.ui.theme.ApplimobilefilmTheme

class MainActivity : AppCompatActivity() {
    @SuppressLint("UnusedMaterial3ScaffoldPaddingParameter")
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            ApplimobilefilmTheme {
                val navController = rememberNavController()
                Scaffold(
                    bottomBar = {
                        BottomBar(onHomeClick = {
                            navController.navigate("home")
                        }, onStarClick = {
                            navController.navigate("favoris")
                        }, onInfoClick = {
                            navController.navigate("details")
                        },
                            navController = navController
                        )
                    },
                    modifier = Modifier.fillMaxSize()
                ) {
                    NavHost(navController = navController, startDestination = "home") {
                        composable("home") { MoviePreviewContent() }
                        composable("favoris") { MoviePreviewContentFav({}, {}) }
                        composable("details") { MoviePreviewD() }
                    }
                }
            }
        }
    }


    @Composable
    fun MoviePreviewContent() {
        val movieSuggestions = listOf(
            "Titanic", "Avatar", "Inception", "The Dark Knight", "Interstellar",
            "La La Land", "Pulp Fiction", "Fight Club", "The Matrix"
        )

        var filteredSuggestions by remember { mutableStateOf(emptyList<String>()) }

        Column(
            modifier = Modifier.fillMaxSize()
        ) {
            Box(
                modifier = Modifier
                    .weight(1.5f)
                    .fillMaxHeight()
                    .fillMaxWidth()
                    .background(Color(0xFF511730))
            ) {
                Column(
                    modifier = Modifier.fillMaxSize()
                ) {
                    SearchBarWithIcon(
                        modifier = Modifier
                            .fillMaxWidth()
                            .weight(1f),
                        suggestions = filteredSuggestions,
                        onSearchTextChanged = { searchText ->
                            filteredSuggestions = movieSuggestions
                                .filter { it.contains(searchText, ignoreCase = true) }
                        }
                    )
                    Spacer(modifier = Modifier.weight(0.1f))
                    ListContent(
                        car1 = listOf(
                            R.drawable.image1,
                            R.drawable.image2,
                            R.drawable.image3,
                            R.drawable.car1
                        ),
                        modifier = Modifier.weight(8.9f)
                    )
                }
            }
        }
    }

    @Composable
    fun ListContent(car1: List<Int>, modifier: Modifier = Modifier) {
        Column(
            modifier = modifier.fillMaxSize()
        ) {
            Box(
                Modifier
                    .fillMaxWidth()
                    .weight(1f)
            ) {
                Column(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(start = 12.dp, end = 12.dp)
                ) {
                    Spacer(modifier = Modifier.height(20.dp))
                    Text(
                        modifier = Modifier
                            .padding(bottom = 20.dp)
                            .align(Alignment.CenterHorizontally),
                        style = androidx.compose.ui.text.TextStyle(fontSize = 24.sp),
                        text = "Films à venir",
                        color = Color(0xFFE0D68A)
                    )
                    Text(
                        text = "Romance",
                        color = Color(0xFFE0D68A)
                    )
                    Row(
                        modifier = Modifier.height(130.dp)
                    ) {
                        LazyRow(
                            modifier = Modifier.padding(top = 12.dp)
                        ) {
                            items(car1) { painter ->
                                ImageScroll(painter = painterResource(painter), text = "Wolverine")
                            }
                        }
                    }
                    Spacer(modifier = Modifier.height(25.dp))
                    Text(
                        text = "Thriller",
                        color = Color(0xFFE0D68A)
                    )
                    Row(
                        modifier = Modifier.height(130.dp)
                    ) {
                        LazyRow(
                            modifier = Modifier.padding(top = 12.dp)
                        ) {
                            items(car1) { painter ->
                                ImageScroll(painter = painterResource(painter), text = "Superman")
                            }
                        }
                    }
                    Spacer(modifier = Modifier.height(25.dp))
                    Text(
                        text = "Fantastique",
                        color = Color(0xFFE0D68A)
                    )
                    Row(
                        modifier = Modifier.height(130.dp)
                    ) {
                        LazyRow(
                            modifier = Modifier.padding(top = 12.dp)
                        ) {
                            items(car1) { painter ->
                                ImageScroll(painter = painterResource(painter), text = "Superman")
                            }
                        }
                    }
                }
            }
        }
    }

    @SuppressLint("UnusedMaterial3ScaffoldPaddingParameter")
    @Composable
    @Preview(showBackground = true)
    fun MoviePreview() {
        MoviePreviewContent()
    }
}